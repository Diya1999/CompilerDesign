%{
    #include<stdio.h>
    #include<string.h>

%}

%token PREPROC STRING CHARACTER MAIN DOUBLE INT STRUCT BREAK LONG SWITCH CASE TYPEDEF CHAR RETURN VOID WHILE DEFAULT FLOAT BOOL NUM NUMBER ID RELOP LOGOP UNARYOP ASSIGN ARITHOP1 ARITHOP2
// setting the precedence
// and associativity of operators
%left '+' '-'
%left '*' '/'
%left '%'

/* Rule Section */
%%
PROGRAM : PREPROC_DIRECTIVE STRUCTURE INT MAIN '('')''{'STATEMENT'}'
| PREPROC_DIRECTIVE STRUCTURE VOID MAIN '('')''{'STATEMENT'}'
;
DATATYPE : INT
|FLOAT
|CHAR
|STRUCT 
;

PREPROC_DIRECTIVE: PREPROC PREPROC_DIRECTIVE
|PREPROC
;

STRUCTURE: TYPEDEF STRUCT ID '{'STRUCTINTERNALS'}' ID ';'
| STRUCT ID '{'STRUCTINTERNALS'}'
;
STRUCTINTERNALS: DECLARATION';' STRUCTINTERNALS
| DECLARATION';'
;
STATEMENT: BREAK';'
|RETURN NUMBER';'
|DECLARATION';'STATEMENT
|ASSIGNMENT';'STATEMENT
|WHILE_STAT STATEMENT
|SWITCH_STAT STATEMENT
|';'
|
;
IDLOOP: '.'ID A
;
A:IDLOOP|'['NUM']'
|
;
DECLARATION: DATATYPE DECTYPE
;
DECTYPE: DECEXP','DECTYPE
| DECEXP
;
DECEXP: DECID|DECID ASSIGN EXPRESSION
DECID: ID IDLOOP|ID IDLOOP'['NUM']'
;
ASSIGNMENT: ID IDLOOP ASSIGN EXPRESSION
| ID'['NUM']'IDLOOP ASSIGN EXPRESSION
| ID IDLOOP ASSIGN '{' EXPRESSION_SET EXPRESSION'}'
| ID'['NUM']'IDLOOP ASSIGN '{'EXPRESSION_SET EXPRESSION'}'
;
EXPRESSION_SET: EXPRESSION','EXPRESSION_SET
|
;
WHILE_STAT: WHILE'('CONDITION')''{'STATEMENT'}'
|WHILE'('CONDITION')'STATEMENT
;
CONDITION: RELATIONALEXPRESSION
| LOGICALEXPRESSION
| ID IDLOOP
| NUMBER
| NUM
| ID'['NUM']'IDLOOP
;
UNARYOPERATOR: UNARYOP
;
RELATIONALOPERATOR: RELOP
;
LOGICALOPERATOR: LOGOP
;
EXPRESSION: EXPRESSION ARITHOP1 T
|T
;
T: T ARITHOP2 F
|F
;
F: ID'['NUM']'IDLOOP UNARYOPERATOR
| ID IDLOOP UNARYOPERATOR
| UNARYOPERATOR ID'['NUM']'IDLOOP
| UNARYOPERATOR ID IDLOOP
| M
;
M: ID IDLOOP
| ID'['NUM']'IDLOOP
| NUMBER
| '('EXPRESSION')'
;
RELATIONALEXPRESSION: EXPRESSION RELATIONALOPERATOR EXPRESSION
;
LOGICALEXPRESSION: LOGICAL_CONDITION RELATIONALEXPRESSION
;
LOGICAL_CONDITION: RELATIONALEXPRESSION LOGICALOPERATOR LOGICAL_CONDITION
|
;
SWITCH_STAT: SWITCH'('CONDITION')''{'CASES DEFAULTSTAT'}'
;
CASES: CASE LABEL':'STATEMENT CASES
| CASE LABEL':'STATEMENT
;
LABEL: NUM 
| NUMBER
| CHARACTER
| STRING
| BOOL
;
DEFAULTSTAT: DEFAULT':' STATEMENT
|
;

%%

int main()
{
    yyin=fopen("test.c","r"); 
    yyparse();
}

/* For printing error messages */
int yyerror(char* s)
{
printf("invalid\n");
}