%{
    #include<stdio.h>
    #include<string.h>
    #include"lex.yy.c"
    
%}

%token PREPROC STRING CHARACTER MAIN INT STRUCT BREAK SWITCH CASE TYPEDEF CHAR RETURN VOID WHILE DEFAULT FLOAT BOOL NUM NUMBER ID RELOP LOGOP UNARYOP ASSIGN ARITHOP1 ARITHOP2 PRINTF SCANF
// setting the precedence
// and associativity of operators
%left ARITHOP1
%left ARITHOP2

/* Rule Section */
%%
PROGRAM : PREPROC_DIRECTIVE STRUCTURE INT MAIN '('')''{'STATEMENT'}'
| PREPROC_DIRECTIVE STRUCTURE VOID MAIN '('')''{'STATEMENT'}'
;
PREPROC_DIRECTIVE: PREPROC PREPROC_DIRECTIVE
|PREPROC
;

STRUCTURE: TYPEDEF STRUCT ID '{'STRUCTINTERNALS'}' ID ';' STRUCTURE
| STRUCT ID '{'STRUCTINTERNALS'}'';' STRUCTURE
|
;

STRUCTINTERNALS: DECLARATION';'STRUCTINTERNALS
| DECLARATION';'
;

DATATYPE : INT
|FLOAT
|CHAR
|STRUCT 
;
STATEMENT: BREAK';'STATEMENT
|RETURN NUM';'
|DECLARATION ';'STATEMENT
|ASSIGNMENT';'STATEMENT
|WHILE_STAT STATEMENT
|SWITCH_STAT STATEMENT
|
;
DECLARATION: DATATYPE DECTYPE
;
DECTYPE: DECEXP','DECTYPE
| DECEXP
;
DECEXP: DECID| DECID ASSIGN EXPRESSION
;
DECID: ID IDLOOP
|ID'['NUM']'IDLOOP
;

IDLOOP: '.'ID A
|
;
A:IDLOOP|'['NUM']'IDLOOP
;
ASSIGNMENT: ID IDLOOP ASSIGN EXPRESSION
| ID'['NUM']'IDLOOP ASSIGN EXPRESSION
| ID IDLOOP ASSIGN '{'EXPRESSION_SET'}'
| ID'['NUM']'IDLOOP ASSIGN '{'EXPRESSION_SET'}'
;

EXPRESSION_SET: EXPRESSION EXPRESSION_SETA
;
EXPRESSION_SETA: ','EXPRESSION_SET
|
;
EXPRESSION: EXPRESSION ARITHOP1 T
|T
;
T: T ARITHOP2 F
|F
;
F: ID'['NUM']'IDLOOP UNARYOP
| ID IDLOOP UNARYOP
| UNARYOP ID'['NUM']'IDLOOP
| UNARYOP ID IDLOOP
| M
;
M: ID IDLOOP
| ID'['NUM']'IDLOOP
| NUMBER
| '('EXPRESSION')'
| NUM
;

WHILE_STAT: WHILE'('CONDITION')''{'STATEMENT'}'
;
CONDITION: RELATIONALEXPRESSION
| LOGICALEXPRESSION
| ID IDLOOP
| NUMBER
| NUM
| ID'['NUM']'IDLOOP
;
RELATIONALEXPRESSION: EXPRESSION RELOP EXPRESSION
;
LOGICALEXPRESSION: RELATIONALEXPRESSION LOGOP RELATIONALEXPRESSION LOGICALNEW
;
LOGICALNEW: LOGOP RELATIONALEXPRESSION LOGICALNEW
|
;

SWITCH_STAT: SWITCH'('CONDITION')''{'CASES DEFAULTSTAT'}'
;
CASES: CASE LABEL':'STATEMENT CASESA
;
CASESA:CASES
|
;
LABEL: NUM 
| NUMBER
| CHARACTER
| STRING
| BOOL
;
DEFAULTSTAT: DEFAULT':' STATEMENT
|
;

%%

int parse(void){ return 1; }

int main()
{

    //yyin=fopen("test.c","r"); 
    yyparse();
    printf("Valid\n");
	return 1;
}

/* For printing error messages */
int yyerror(char* s)
{
printf("invalid\n");
}
